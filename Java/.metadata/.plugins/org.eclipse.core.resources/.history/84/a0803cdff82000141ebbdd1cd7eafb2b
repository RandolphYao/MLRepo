package org.ranyao.nlpUnitTest;

import static org.junit.Assert.*;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Path;
import java.nio.file.Paths;

import opennlp.tools.postag.POSModel;
import opennlp.tools.postag.POSTaggerME;
import opennlp.tools.sentdetect.SentenceDetector;
import opennlp.tools.sentdetect.SentenceDetectorME;
import opennlp.tools.sentdetect.SentenceModel;
import opennlp.tools.tokenize.SimpleTokenizer;
import opennlp.tools.util.InvalidFormatException;

import org.junit.Test;
import org.tartarus.snowball.ext.englishStemmer;

public class TameTextTest {

	private String modelDir;

	public TameTextTest() {
		this.modelDir = Paths.get("lib\\models").toAbsolutePath().toString();
	}

	@Test
	public void POSTaggingTest() throws InvalidFormatException, IOException {
		File posModelFile = new File(modelDir, "en-pos-maxent.bin");

		FileInputStream posModelStream = new FileInputStream(posModelFile);
		POSModel model = new POSModel(posModelStream);
		POSTaggerME tagger = new POSTaggerME(model);
		String[] words = SimpleTokenizer.INSTANCE
				.tokenize("The quick, red fox jumped over the lazy, brown dogs.");
		String[] result = tagger.tag(words);

		assertEquals(words[0], "DT", result[0]);
		assertEquals(words[1], "JJ", result[1]);
		assertEquals(words[2], ",", result[2]);
		assertEquals(words[3], "JJ", result[3]);
		assertEquals(words[4], "NN", result[4]);
		assertEquals(words[5], "VBD", result[5]);
		assertEquals(words[6], "IN", result[6]);
		assertEquals(words[7], "DT", result[7]);
		assertEquals(words[8], "JJ", result[8]);
		assertEquals(words[9], ",", result[9]);
		assertEquals(words[10], "JJ", result[10]);
		assertEquals(words[11], "NNS", result[11]);
		assertEquals(words[12], ".", result[12]);
	}

	@Test
	public void StemmerTest() {
		englishStemmer english = new englishStemmer();
		String[] test = { "bank", "banks", "banking", "banker", "banked",
				"bankers" };
		String[] gold = { "bank", "bank", "bank", "banker", "bank", "banker" };

		for (int i = 0; i < test.length; i++) {
			english.setCurrent(test[i]);
			english.stem();
			String afterStem = english.getCurrent();
			assertEquals(afterStem, gold[i]);
		}
	}

	@Test
	public void SentenceDetectionTest() throws InvalidFormatException,
			IOException {
		File modelFile = new File(modelDir, "en-sent.bin");
		InputStream modelStream = new FileInputStream(modelFile);
		SentenceModel model = new SentenceModel(modelStream);
		SentenceDetector detector = new SentenceDetectorME(model);
		String testString = "This is a sentence. It has fruits, vegetables,"
				+ " etc. but does not have meat. Mr. Smith went to Washington.";
		String[] result = detector.sentDetect(testString);
		
		assertEquals("This is a sentence.", result[0]);
		assertEquals("It has fruits, vegetables, etc. but does not have meat.", result[1]);
		assertEquals("Mr. Smith went to Washington.", result[2]);
	}
	
	@Test
	public void ParsingTest()
	{
		File parserFile = new File(this.modelDir, "en-parser-chunking.bin");
		FileInputStream parserStream = new FileInputStream(parserFile);
		ParserModel model = new ParserModel(parserStream);
		Parser parser = ParserFactory.create(
		model,
		20, // beam size
		0.95); // advance percentage
		Parse[] results = ParserTool.parseLine(
		"The Minnesota Twins , the 1991 World Series " +
		"Champions , are currently in third place .",
		parser, 3);
		for (int i = 0; i < results.length; i++) {
		results[i].show();		
	}

}
